
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	СуммаДоговора = Товары.Итог("Стоимость") + Услуги.Итог("Стоимость");
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	// Назначение регистров:
	// ТоварыНаСкладах  - быстрая проверка остатков
	// СтоимостьТоваров - получение себестоимости
	// ЦеныНоменклатуры - хранение разных видов цен номенклатуры
	// Прибыль 			- хранение финансового результата
	
	// Количество в регистре СтоимостьТоваров дублирует запись в регистре ТоварыНаСкладах
	// для механизма оперативного проведения
	// Сумма в регистре СтоимостьТоваров равна Количество * Цена в регистре ЦеныНоменклатуры 
	// с видом цены Закупочная
	

	#Область ПроверкаНаОтрицательныйОстаток

	// Вариант А
	// Свойство: Запись движений при проведении: Записывать выбранные
	// Флаг сбрасывается после Движения.Записать()
	//Движения.ТоварыНаСкладах.Записывать = Истина;

    // Защита от добавления предыдущих записей при проведении формы
    // Для управляемой формы используется, когда установлен флаг Использовать всегда 
    // у реквизита Движения
    // Если 
    // Свойство: Запись движений при проведении: записывать модифицированные
    // Добавляет флаг модифицированности в Движение
	//Движения.ТоварыНаСкладах.Очистить();


	// регистр ТоварыНаСкладах Расход
	Для каждого ТекСтрока Из Товары Цикл
		Движение = Движения.ТоварыНаСкладах.ДобавитьРасход();
		Движение.Период 		= Дата;
		Движение.Номенклатура 	= ТекСтрока.Номенклатура;
		Движение.Характеристика = ТекСтрока.Характеристика;
		Движение.Склад 			= Склад;
		Движение.Количество 	= ТекСтрока.Количество;
	КонецЦикла;

	// Блокируем регистр ТоварыНаСкладах до конца транзакции
	Движения.ТоварыНаСкладах.БлокироватьДляИзменения = Истина;

	// Вариант А
	// Записываем движения, очищаем флаг Движения.ТоварыНаСкладах.БлокироватьДляИзменения
	// Выполняет запись движений при проведении в единой последовательности
	//Движения.Записать();
	
	// Вариант Б
	// Записываем движения, не очищаем флаг Движения.ТоварыНаСкладах.БлокироватьДляИзменения
	// Последовательность записи наборов контролируется самостоятельно
	Движения.ТоварыНаСкладах.Записать();
	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();

	// Группируем повторяющиеся значения Номенклатуры и Характеристики,
	// помещаем во временную таблицу
	// Контроль остатков в разрезе Номенклатуры и Характеристики
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	СУММА(ТабЧасть.Количество) КАК Количество,
		|	СУММА(ТабЧасть.Стоимость) КАК Стоимость
		|ПОМЕСТИТЬ ВТ_Товары
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ТоварыНаСкладахОстатки.Номенклатура КАК Номенклатура,
		|	ТоварыНаСкладахОстатки.Характеристика КАК Характеристика
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(
		|			&Дата,
		|			(Номенклатура, Характеристика) В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура,
		|						ВТ_Товары.Характеристика
		|					ИЗ
		|						ВТ_Товары)
		|				И Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток < 0";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Граница = Новый Граница(МоментВремени(), ВидГраницы.Включая);
	Запрос.УстановитьПараметр("Дата", Граница);
	Запрос.УстановитьПараметр("Склад", Склад);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Сообщить("Недостаточно товара " 
				+ ВыборкаДетальныеЗаписи.Номенклатура 
				+ " с характеристикой "
				+ ВыборкаДетальныеЗаписи.Характеристика
				+ " на складе " + Склад + "! "
				+ "Не хватает " + -ВыборкаДетальныеЗаписи.КоличествоОстаток);
		КонецЦикла; 
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	#КонецОбласти		
	
	////////////////////////////  Конец проверки остатков товаров  ////////////////////////////

	// регистр СтоимостьПроданныхТоваров
	// Проверка значения константы для расчета Надбавки
	ВидЦеныДляРасчетаНадбавки = Константы.ВидЦеныДляРасчетаНадбавки.Получить();
	Если Не ЗначениеЗаполнено(ВидЦеныДляРасчетаНадбавки) Тогда
		ВидЦеныДляРасчетаНадбавки = Справочники.ВидыЦен.Себестоимость;
		Константы.ВидЦеныДляРасчетаНадбавки.Установить(ВидЦеныДляРасчетаНадбавки);
	КонецЕсли;
	ОпределенРасчетВидаЦен = Новый Соответствие();
	ОпределенРасчетВидаЦен.Вставить(Справочники.ВидыЦен.Себестоимость, "Себестоимость"); 
	ОпределенРасчетВидаЦен.Вставить(Справочники.ВидыЦен.Реализации,    "Реализации"); 
	Если Не ЗначениеЗаполнено(ОпределенРасчетВидаЦен[ВидЦеныДляРасчетаНадбавки]) Тогда
		Сообщить("Расчет надбавки для указанного вида цены не определён(Константа ВидЦеныДляРасчетаНадбавки = "
			+ ВидЦеныДляРасчетаНадбавки
			+ ")");
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	#Область ПолучениеВыборкиСебестоимости
	// Выгружаем для блокировки значения Номенклатуры
	// из временной таблицы
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Товары.Номенклатура КАК Номенклатура
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары";
	Результат_Товары = Запрос.Выполнить();
	// Выборка_Товары = Результат_Товары.Выбрать();
	
	// Блокируем поля, изменяемые документом, по номенклатуре
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьТоваров");
	ЭлементБлокировки.Режим 		 = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = Результат_Товары;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	Если Проведен Тогда
		// Очищаем предыдущие записи документа
		// Блокируем их до окончания транзакции (они нужны в случае отката)
		// Записываем пустое движение
		
		// !!!   
		//Движения.СтоимостьТоваров.Очистить();
		
		Движения.СтоимостьТоваров.БлокироватьДляИзменения = Истина;
		Движения.СтоимостьТоваров.Записать();
	КонецЕсли;
	
	
	// Находим Количество остатков и их цены в разрезе Номенклатуры
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_Товары.Номенклатура КАК Номенклатура,
		|	ВТ_Товары.Характеристика КАК ХарактеристикаНоменклатуры,
		|	ВТ_Товары.Стоимость КАК Стоимость,
		|	ВТ_Товары.Количество КАК Количество,
		|	СтоимостьТоваровОстатки.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(СтоимостьТоваровОстатки.СтоимостьОстаток, 0) КАК СуммаОстаток,
		|	ЕСТЬNULL(СтоимостьТоваровОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	ВТ_Товары КАК ВТ_Товары
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьТоваров.Остатки(
		|				&Дата,
		|				Номенклатура В
		|					(ВЫБРАТЬ
		|						ВТ_Товары.Номенклатура КАК Номенклатура
		|					ИЗ
		|						ВТ_Товары КАК ВТ_Товары)) КАК СтоимостьТоваровОстатки
		|		ПО ВТ_Товары.Номенклатура = СтоимостьТоваровОстатки.Номенклатура
		|ИТОГИ
		|	МАКСИМУМ(ХарактеристикаНоменклатуры),
		|	МАКСИМУМ(Стоимость),
		|	МАКСИМУМ(Количество),
		|	СУММА(СуммаОстаток),
		|	СУММА(КоличествоОстаток)
		|ПО
		|	Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВТ_Товары";
		
	
	РезультатЗапроса     = Запрос.Выполнить();
	ВыборкаСебестоимости = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	#КонецОбласти 

	// регистр СтоимостьПроданныхТоваров
	Движения.СтоимостьПроданныхТоваров.Записывать = Истина;
	
	// регистр Прибыль таблица Товары
	Движения.Прибыль.Записывать = Истина;
	
	// регистр СтоимостьТоваров
	Движения.СтоимостьТоваров.Записывать = Истина;
	
	Пока ВыборкаСебестоимости.Следующий() Цикл
		// Деталировка себестоимости:
		//Выборка = ВыборкаСебестоимости.Выбрать();
		//Пока Выборка.Следующий() Цикл
		//КонецЦикла; 
	
		// Себестоимость = Расчеты.РасчетСебестоимостиТовара(ТекСтрокаТовары.Номенклатура);
		СебестоимостьЕд = ВыборкаСебестоимости.СуммаОстаток / ВыборкаСебестоимости.КоличествоОстаток;	
		Себестоимость   = СебестоимостьЕд * ВыборкаСебестоимости.Количество;
		Прибыль = ВыборкаСебестоимости.Стоимость - Себестоимость;
		
		// регистр Прибыль
		Движение = Движения.Прибыль.Добавить();
		Движение.Период       = Дата;
		Движение.Номенклатура = ВыборкаСебестоимости.Номенклатура;
		Движение.Сумма        = Прибыль;
		
		// регистр СтоимостьТоваров
		Движение = Движения.СтоимостьТоваров.ДобавитьРасход();
		Движение.Период         = Дата;
		Движение.Номенклатура   = ВыборкаСебестоимости.Номенклатура;
		Движение.Характеристика = ВыборкаСебестоимости.ХарактеристикаНоменклатуры;
		Движение.Стоимость      = Себестоимость;  
		Движение.Количество     = ВыборкаСебестоимости.Количество;

		// регистр СтоимостьПроданныхТоваров
		Движение = Движения.СтоимостьПроданныхТоваров.Добавить();
		Движение.Период         = Дата;
		Движение.Номенклатура   = ВыборкаСебестоимости.Номенклатура;
		Движение.Сотрудник		= Сотрудник;
		Движение.Должность		= Должность;
		Если ОпределенРасчетВидаЦен[ВидЦеныДляРасчетаНадбавки] = "Себестоимость" Тогда
			Движение.Сумма		= Себестоимость;
		ИначеЕсли ОпределенРасчетВидаЦен[ВидЦеныДляРасчетаНадбавки] = "Реализации"  Тогда
			Движение.Сумма		= ВыборкаСебестоимости.Стоимость;
		КонецЕсли; 
		
	КонецЦикла;

	// регистр Прибыль таблица Услуги
	Для Каждого ТекСтрокаТовары Из Услуги Цикл
		Движение = Движения.Прибыль.Добавить();
		Движение.Период       = Дата;
		Движение.Номенклатура = ТекСтрокаТовары.Номенклатура;
		Движение.Сумма        = ТекСтрокаТовары.Стоимость;
	КонецЦикла;

КонецПроцедуры
