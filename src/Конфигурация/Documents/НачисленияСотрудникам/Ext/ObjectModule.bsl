
Функция ПолучитьСписокОкладов(Ссылка, Дата) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НачисленияСотрудникамНачисления.НомерСтроки КАК НомерСтроки,
		|	НачисленияСотрудникамНачисления.Сотрудник КАК Сотрудник,
		|	НачисленияСотрудникамНачисления.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_Начисления
		|ИЗ
		|	Документ.НачисленияСотрудникам.Начисления КАК НачисленияСотрудникамНачисления
		|ГДЕ
		|	НачисленияСотрудникамНачисления.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Должность
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Начисления.НомерСтроки КАК НомерСтроки,
		|	ОкладыСотрудниковСрезПоследних.Оклад КАК Оклад
		|ИЗ
		|	ВТ_Начисления КАК ВТ_Начисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОкладыСотрудников.СрезПоследних(
		|				&Дата,
		|				(Сотрудник, Должность) В
		|					(ВЫБРАТЬ
		|						ВТ_Начисления.Сотрудник,
		|						ВТ_Начисления.Должность
		|					ИЗ
		|						ВТ_Начисления)) КАК ОкладыСотрудниковСрезПоследних
		|		ПО ВТ_Начисления.Сотрудник = ОкладыСотрудниковСрезПоследних.Сотрудник
		|			И ВТ_Начисления.Должность = ОкладыСотрудниковСрезПоследних.Должность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Результат = Новый Массив(Выборка.Количество() + 1);
	Пока Выборка.Следующий() Цикл
		Результат[Выборка.НомерСтроки] = Выборка.Оклад;
	КонецЦикла; 
	Возврат Результат;
КонецФункции


Процедура ОбработкаПроведения(Отказ, Режим)

	ОкладыМесяц       = Неопределено;
	
	ПВР = Новый Соответствие();
	ПВР["Оклад"] 		= ПланыВидовРасчета.ОсновныеНачисления.Оклад;
	ПВР["Командировка"] = ПланыВидовРасчета.ОсновныеНачисления.Командировка;
	ПВР["Больничный"]	= ПланыВидовРасчета.ОсновныеНачисления.Больничный;
	ПВР["Премия"]		= ПланыВидовРасчета.ДополнительныеНачисления.Премия;
	ПВР["Надбавка"] 	= ПланыВидовРасчета.ДополнительныеНачисления.Надбавка;

	НаличиеПВР = Новый Структура();
	Для каждого КлЗнч Из ПВР Цикл
		НаличиеПВР.Вставить(КлЗнч.Значение, Ложь);
	КонецЦикла; 

	Для каждого КлЗнч Из ПВР Цикл
		ПВР[КлЗнч.Значение] = КлЗнч.Ключ; 
	КонецЦикла; 

	// регистр ОсновныеНачисления
	Движения.ОсновныеНачисления.Записывать = Истина;
	Для Каждого ТекСтрокаНачисления Из Начисления Цикл
		Движение = Движения.ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ТекСтрокаНачисления.ВидНачисления;
		Движение.ПериодДействияНачало = ТекСтрокаНачисления.ДатаНачала;
		Движение.ПериодДействияКонец = КонецДня(ТекСтрокаНачисления.ДатаОкончания);
		Движение.ПериодРегистрации = ТекСтрокаНачисления.ДатаНачала;
		Движение.Сотрудник = ТекСтрокаНачисления.Сотрудник;
		Движение.Должность = ТекСтрокаНачисления.Должность;
		Движение.График = ТекСтрокаНачисления.График;
		Если ЗначениеЗаполнено(ПВР[ТекСтрокаНачисления.ВидНачисления]) Тогда
			НаличиеПВР[ПВР[ТекСтрокаНачисления.ВидНачисления]] = Истина;
		КонецЕсли; 
		Если ТекСтрокаНачисления.ВидНачисления = ПВР["Оклад"] 
		 ИЛИ ТекСтрокаНачисления.ВидНачисления = ПВР["Командировка"] Тогда
						
			ОкладыДата = НачалоМесяца(ТекСтрокаНачисления.ДатаНачала);
			
			Если ОкладыМесяц = Неопределено Тогда
				ОкладыМесяц = ОкладыДата;
			ИначеЕсли ОкладыДата <> ОкладыМесяц Тогда
				Сообщить("Зачисление зарплаты в одном документе для разных месяцев не реализовано!" 
					+ " Строка номер:" + ТекСтрокаНачисления.НомерСтроки);
				Отказ = Истина;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;

	// регистр ДополнительныеНачисления
	Движения.ДополнительныеНачисления.Записывать = Истина;
	ТекПериод  = Новый Структура("Начало,			  Конец"
							    , НачалоМесяца(Дата), КонецМесяца(Дата));
	ПредПериод = Новый Структура("Начало,Конец");
	ПредПериод.Начало = Дата(Год(Дата), Месяц(Дата) - 1, 1);
	ПредПериод.Конец  = КонецМесяца(ПредПериод.Начало);
							   
	Для Каждого ТекСтрокаНачисленияДоп Из НачисленияДоп Цикл
		Движение = Движения.ДополнительныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = ТекСтрокаНачисленияДоп.ВидНачисления;
		Движение.ПериодРегистрации = НачалоМесяца(Дата);
		Если Движение.ВидРасчета = ПВР["Надбавка"] Тогда
			Движение.БазовыйПериодНачало = ПредПериод.Начало;
			Движение.БазовыйПериодКонец  = ПредПериод.Конец;
        Иначе
			Движение.БазовыйПериодНачало = ТекПериод.Начало;
			Движение.БазовыйПериодКонец  = ТекПериод.Конец;
		КонецЕсли; 
		Движение.Сотрудник = ТекСтрокаНачисленияДоп.Сотрудник;
		Движение.Должность = ТекСтрокаНачисленияДоп.Должность;
		Движение.Размер = ТекСтрокаНачисленияДоп.Размер;
		Если ЗначениеЗаполнено(ПВР[ТекСтрокаНачисленияДоп.ВидНачисления]) Тогда
			НаличиеПВР[ПВР[ТекСтрокаНачисленияДоп.ВидНачисления]] = Истина;
		КонецЕсли; 
	КонецЦикла;

	Движения.Записать();



	ОкладыПоСотрудникам = ПолучитьСписокОкладов(Ссылка, ОкладыМесяц);

	
// ОКЛАД
	Если НаличиеПВР.Оклад Тогда
		
		Запрос = Новый Запрос;	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисленияДанныеГрафика.Должность КАК Должность,
			|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыФактическийПериодДействия, 0) КАК ФактЧасы,
			|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыПериодДействия, 0) КАК ПланЧасы,
			|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
			|			Регистратор = &Ссылка
			|				И ВидРасчета = &Оклад) КАК ОсновныеНачисленияДанныеГрафика";
		
		Запрос.УстановитьПараметр("Оклад", ПВР["Оклад"]);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		Для каждого СтрДвижение Из Движения.ОсновныеНачисления Цикл
			Если СтрДвижение.ВидРасчета <> ПВР["Оклад"] Тогда
				Продолжить;
			КонецЕсли;
			Выборка.Сбросить();
			Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
			
			Если Не ЗначениеЗаполнено(ОкладыПоСотрудникам[СтрДвижение.НомерСтроки]) Тогда
				Сообщить("Ошибка проведения документа Начисление зарплаты" 
					+ " № " + Номер
					+ " от " + Дата
					+ ". Не установлен оклад сотрудника " + СтрДвижение.Сотрудник
					+ " (строка №" + СтрДвижение.НомерСтроки + ")");
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			Если Выборка.ПланЧасы = 0 Тогда
				СтрДвижение.Результат = 0;	
			Иначе
				Оклад = ОкладыПоСотрудникам[СтрДвижение.НомерСтроки];
				СтрДвижение.Результат = Оклад * Выборка.ФактЧасы / Выборка.ПланЧасы;
			КонецЕсли; 
			СтрДвижение.Факт = Выборка.ФактЧасы;
			
		КонецЦикла; 
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
		Движения.ОсновныеНачисления.Записать( , Истина);
	КонецЕсли; 

// БОЛЬНИЧНЫЙ
	Если НаличиеПВР.Больничный Тогда
			
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияДанныеГрафика.ВидРасчета КАК ВидРасчета,
			|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисленияДанныеГрафика.Должность КАК Должность,
			|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеДниФактическийПериодДействия, 0) КАК ДниБолезни,
			|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
			|			Регистратор = &Ссылка
			|				И ВидРасчета = &Больничный) КАК ОсновныеНачисленияДанныеГрафика";
		
		Запрос.УстановитьПараметр("Больничный", ПВР["Больничный"]);
		
		Выборка = Запрос.Выполнить().Выбрать();
		СтавкаПоБольничному = Константы.СтавкаПоБольничномуВДень.Получить();
		Для каждого СтрДвижение Из Движения.ОсновныеНачисления Цикл
			Если СтрДвижение.ВидРасчета <> ПВР["Больничный"] Тогда
				Продолжить;
			КонецЕсли;
			Выборка.Сбросить();
			Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
			
			СтрДвижение.Результат = Выборка.ДниБолезни * СтавкаПоБольничному;
			СтрДвижение.Факт = Выборка.ДниБолезни;
		КонецЦикла; 
		Движения.ОсновныеНачисления.Записать( , Истина);

	КонецЕсли; 

// Командировочные
	Если НаличиеПВР.Командировка Тогда

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
			|	ОсновныеНачисленияДанныеГрафика.Сотрудник КАК Сотрудник,
			|	ОсновныеНачисленияДанныеГрафика.Должность КАК Должность,
			|	ОсновныеНачисленияДанныеГрафика.ВидРасчета КАК ВидРасчета,
			|	ЕСТЬNULL(ДЕНЬ(ОсновныеНачисленияДанныеГрафика.ПериодДействияКонец) - ДЕНЬ(ОсновныеНачисленияДанныеГрафика.ПериодДействияНачало) + 1, 0) КАК ДниКомандировки,
			|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыФактическийПериодДействия, 0) КАК ФактЧасы,
			|	ЕСТЬNULL(ОсновныеНачисленияДанныеГрафика.ЗначениеЧасыПериодДействия, 0) КАК ПланЧасы
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисления.ДанныеГрафика(
			|			Регистратор = &Ссылка
			|				И ВидРасчета = &Командировка) КАК ОсновныеНачисленияДанныеГрафика
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Командировка", ПВР["Командировка"]);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Суточные = Константы.КомандировочныеСуточнаяДоплата.Получить();
		Коэффициент = Константы.КомандировочныеКоэффициентКОкладу.Получить();
		
		НомераСтрокВыборки = Движения.ОсновныеНачисления.ВыгрузитьКолонку("НомерСтроки");	
		Пока Выборка.Следующий() Цикл
			
			
			Индекс = НомераСтрокВыборки.Найти(Выборка.НомерСтроки);
			СтрДвижение = Движения.ОсновныеНачисления.Получить(Индекс);
			
			Если Не ЗначениеЗаполнено(ОкладыПоСотрудникам[СтрДвижение.НомерСтроки]) Тогда
				Сообщить("Ошибка проведения документа Начисление зарплаты от " + Дата
					+ ". Не установлен оклад сотрудника " + СтрДвижение.Сотрудник
					+ " (строка №" + СтрДвижение.НомерСтроки + ")");
				Отказ = Истина;
				Продолжить;
			КонецЕсли;
			Оклад = ОкладыПоСотрудникам[СтрДвижение.НомерСтроки];
			
			ПочасоваяДоплата = 0;
			Если Выборка.ПланЧасы <> 0 Тогда
				ПочасоваяДоплата = Оклад * Коэффициент * Выборка.ФактЧасы / Выборка.ПланЧасы;
			КонецЕсли; 
			СтрДвижение.Результат = ПочасоваяДоплата + Выборка.ДниКомандировки * Суточные;
			СтрДвижение.Факт = Выборка.ДниКомандировки;
		КонецЦикла; 
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 


		Движения.ОсновныеНачисления.Записать( , Истина);
	КонецЕсли; 
	
// Расчет премии
	Если НаличиеПВР.Премия Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДополнительныеНачисленияБазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|	ДополнительныеНачисленияБазаОсновныеНачисления.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисления.БазаОсновныеНачисления(
			|			&МассивИзмерений,
			|			&МассивИзмерений,
			|			,
			|			ВидРасчета = &Премия
			|				И Регистратор = &Ссылка) КАК ДополнительныеНачисленияБазаОсновныеНачисления";
		МассивИзмерений = Новый Массив(2);
		МассивИзмерений[0] = "Сотрудник";
		МассивИзмерений[1] = "Должность";
		Запрос.УстановитьПараметр("МассивИзмерений", МассивИзмерений);
		Запрос.УстановитьПараметр("Премия", ПВР["Премия"]);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		
		Для каждого СтрДвижение Из Движения.ДополнительныеНачисления Цикл
			Если СтрДвижение.ВидРасчета <> ПВР["Премия"] Тогда
				Продолжить;
			КонецЕсли;
			Выборка.Сбросить();
			Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
			СтрДвижение.Результат = СтрДвижение.Размер * Выборка.РезультатБаза / 100 ; 
		КонецЦикла; 
		Движения.ДополнительныеНачисления.Записать( , Истина);
	
	КонецЕсли; 
	
// Расчет надбавки
	Если НаличиеПВР.Надбавка Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НачисленияСотрудникамНачисленияДоп.НомерСтроки КАК НомерСтроки,
			|	НачисленияСотрудникамНачисленияДоп.Сотрудник КАК Сотрудник,
			|	НачисленияСотрудникамНачисленияДоп.Должность КАК Должность
			|ПОМЕСТИТЬ ВТ_НачисленияДоп
			|ИЗ
			|	Документ.НачисленияСотрудникам.НачисленияДоп КАК НачисленияСотрудникамНачисленияДоп
			|ГДЕ
			|	НачисленияСотрудникамНачисленияДоп.Ссылка = &Ссылка
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Сотрудник,
			|	Должность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ_НачисленияДоп.НомерСтроки КАК НомерСтроки,
			|	ЕСТЬNULL(ПрибыльОбороты.СуммаОборот, 0) КАК СуммаОборот
			|ИЗ
			|	ВТ_НачисленияДоп КАК ВТ_НачисленияДоп
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьПроданныхТоваров.Обороты(
			|				&НачалоПериода,
			|				&КонецПериода,
			|				Месяц,
			|				(Сотрудник, Должность) В
			|					(ВЫБРАТЬ
			|						ВТ_НачисленияДоп.Сотрудник,
			|						ВТ_НачисленияДоп.Должность
			|					ИЗ
			|						ВТ_НачисленияДоп)) КАК ПрибыльОбороты
			|		ПО ВТ_НачисленияДоп.Сотрудник = ПрибыльОбороты.Сотрудник
			|			И ВТ_НачисленияДоп.Должность = ПрибыльОбороты.Должность
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НачалоПериода", ПредПериод.Начало);
		Запрос.УстановитьПараметр("КонецПериода", ПредПериод.Конец);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Для каждого СтрДвижение Из Движения.ДополнительныеНачисления Цикл
				Если СтрДвижение.ВидРасчета <> ПВР["Надбавка"] Тогда
					Продолжить;
				КонецЕсли;
				Выборка.НайтиСледующий(СтрДвижение.НомерСтроки, "НомерСтроки");
				СтрДвижение.Результат = СтрДвижение.Размер * Выборка.СуммаОборот / 100; // 1%
			КонецЦикла; 
			Движения.ДополнительныеНачисления.Записать( , Истина);
		КонецЕсли;	
	КонецЕсли; 
КонецПроцедуры
